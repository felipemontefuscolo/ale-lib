# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

ALELIB_DIR = ${HOME}/Dropbox/cl-simu2/ale-lib
export ALELIB_DIR
include ../conf/variables


# Where to find user code.
USER_DIR = .

CXX = g++

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include $(ALE_INCLUDE)

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -gdwarf-2

#-gdwarf-2 is for handle inline functions in gdb

LDFLAGS	= -L${ALE_LIBS_DIR} -lalelib
LDFLAGS+= -fopenmp -lpthread 
#                            -L$(METIS_LD) -lmetis

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

GTEST_INCLUDE = -I$(GTEST_DIR)/include

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

.PHONY: all clean

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^


libalelib.a: $(ALE_LIBS_DIR)/libalelib.a
	$(MAKE) -C $(ALELIB_DIR)

# House-keeping build targets.

CPPSOURCES = $(wildcard *.cpp)
TOBJECTS = $(CPPSOURCES:.cpp=.o)

all: gtest.a gtest_main.a $(CPPSOURCES:.cpp=.o) $(CPPSOURCES:.cpp=.d) alltests.exe

%.o: %.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< $(LDFLAGS) -o $@ gtest.a gtest_main.a


alltests.exe: $(TOBJECTS) gtest.a gtest_main.a libalelib.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(TOBJECTS) -o $@ $(LDFLAGS) gtest.a gtest_main.a
	@echo 
	@echo all tests successfully compiled
	@echo 


-include $(CPPSOURCES:.cpp=.d)

%.d: %.cpp $(ALE_LIBS_DIR)/libalelib.a
	$(ALE_CXX) $< -MM -MT '$*.o $*.d ' -MD $(CXXFLAGS) $(CPPFLAGS)

clean:
	$(ALE_RM) *.o *.d *.exe *~ gtest.a gtest_main.a

#all: gtest.a gtest_main.a $(CPPSOURCES:.cpp=.cpp)
#
#%.o: %.cpp $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< $(LDFLAGS) -o $@
#	
#%.exe: %.o gtest.a gtest_main.a
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS) gtest.a gtest_main.a
##	rm $<
#	
#clean:
#	$(ALE_RM) *.o *.exe *~ gtest.a gtest_main.a
#	
#remade:
#	$(MAKE) clean
#	$(MAKE)
#
#-include $(CPPSOURCES:.cpp=.d)
#
#%.d: %.cpp
#	$(ALE_CXX) $< -MM -MT '$*.o $*.d ' -MD $(CXXFLAGS) $(GTEST_INCLUDE)
#
#run:
#	for i in `ls *.exe`; do ./$${i}; done

